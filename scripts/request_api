#!/bin/bash

# Configuration
API_BASE_URL="http://localhost:8000/api/v1"
TOKEN="supersecret123"

# Colors for the menu
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display main menu
show_main_menu() {
  clear
  echo -e "${YELLOW}==== MAIN MENU ====${NC}"
  echo -e "${GREEN}1.${NC} TAO Dividends"
  echo -e "${GREEN}2.${NC} Wallet Operations"
  echo -e "${RED}0.${NC} Exit"
  echo -e "${YELLOW}===================${NC}"
  echo -n "Select an option: "
}

# Function to display TAO Dividends menu
show_tao_dividends_menu() {
  clear
  echo -e "${YELLOW}==== TAO DIVIDENDS MENU ====${NC}"
  echo -e "${GREEN}1.${NC} Get all dividends"
  echo -e "${GREEN}2.${NC} Get dividends by netuid"
  echo -e "${GREEN}3.${NC} Get dividends by hotkey"
  echo -e "${GREEN}4.${NC} Get specific dividend (netuid + hotkey)"
  echo -e "${GREEN}5.${NC} Get dividend and trigger trade"
  echo -e "${RED}0.${NC} Back to main menu"
  echo -e "${YELLOW}===========================${NC}"
  echo -n "Select an option: "
}

# Function to display Wallet Operations menu
show_wallet_menu() {
  clear
  echo -e "${YELLOW}==== WALLET OPERATIONS MENU ====${NC}"
  echo -e "${GREEN}1.${NC} Create new wallet"
  echo -e "${GREEN}2.${NC} Transfer TAO to wallet"
  echo -e "${RED}0.${NC} Back to main menu"
  echo -e "${YELLOW}===============================${NC}"
  echo -n "Select an option: "
}

# Function to make API requests
api_request() {
  local endpoint=$1
  local params=$2
  local url="$API_BASE_URL$endpoint?$params"

  echo -e "${BLUE}Making request to: $url${NC}"
  echo ""

  response=$(curl -s -H "Authorization: $TOKEN" "$url")

  if [ $? -eq 0 ]; then
    echo -e "${GREEN}Server response:${NC}"
    echo "$response" | jq . || echo "$response"
  else
    echo -e "${RED}Request error${NC}"
    echo "$response"
  fi

  read -r -p "Press Enter to continue..."
}

# Function to create a new wallet
create_wallet() {
  clear
  echo -e "${YELLOW}=== CREATE NEW WALLET ===${NC}"
  read -r -p "Wallet name (default: testnet): " wallet_name
  wallet_name=${wallet_name:-testnet}

  echo -e "${BLUE}Optional: Enter mnemonics (space separated) or leave empty to generate new:${NC}"
  read -r -p "Mnemonics: " mnemonics

  local payload="{\"name\":\"$wallet_name\""
  if [ -n "$mnemonics" ]; then
    # Convert mnemonics to JSON array
    mnemonics_array=$(echo "$mnemonics" | jq -R -s -c 'split(" ")')
    payload="$payload, \"mnemonics\":$mnemonics_array"
  fi
  payload="$payload}"

  echo -e "${BLUE}Sending payload: $payload${NC}"
  echo ""

  response=$(curl -s -X POST -H "Content-Type: application/json" -H "Authorization: $TOKEN" \
    -d "$payload" "$API_BASE_URL/create_wallet")

  if [ $? -eq 0 ]; then
    echo -e "${GREEN}Server response:${NC}"
    echo "$response" | jq . || echo "$response"
  else
    echo -e "${RED}Request error${NC}"
    echo "$response"
  fi

  read -r -p "Press Enter to continue..."
}

# Function to transfer TAO
transfer_tao() {
  clear
  echo -e "${YELLOW}==== TRANSFER TAO ====${NC}"
  read -r -p "Destination wallet name (default: testnet): " wallet_name
  wallet_name=${wallet_name:-testnet}

  read -r -p "Amount of TAO to transfer (max 40.0): " amount

  payload="{\"name\":\"$wallet_name\", \"amount\":$amount}"

  echo -e "${BLUE}Sending payload: $payload${NC}"
  echo ""

  response=$(curl -s -X POST -H "Content-Type: application/json" -H "Authorization: $TOKEN" \
    -d "$payload" "$API_BASE_URL/transfer")

  if [ $? -eq 0 ]; then
    echo -e "${GREEN}Server response:${NC}"
    echo "$response" | jq . || echo "$response"
  else
    echo -e "${RED}Request error${NC}"
    echo "$response"
  fi

  read -r -p "Press Enter to continue..."
}

# Main menu loop
while true; do
  show_main_menu
  main_option=""
  while [[ ! "$main_option" =~ ^[0-9]+$ ]]; do
    read -r -n 1 main_option
  done

  case $main_option in
  1) # TAO Dividends
    while true; do
      show_tao_dividends_menu
      tao_option=""
      while [[ ! "$tao_option" =~ ^[0-9]+$ ]]; do
        read -r -n 1 tao_option
      done

      echo ""
      case $tao_option in
      1) # All dividends
        api_request "/tao_dividends" ""
        ;;
      2) # By netuid
        read -r -p "Enter netuid (default 18): " netuid
        netuid=${netuid:-18}
        api_request "/tao_dividends" "netuid=$netuid"
        ;;
      3) # By hotkey
        read -r -p "Enter hotkey (default: 5FFApaS75bv5pJHfAp2FVLBj9ZaXuFDjEypsaBNc1wCfe52v): " hotkey
        hotkey=${hotkey:-5FFApaS75bv5pJHfAp2FVLBj9ZaXuFDjEypsaBNc1wCfe52v}
        api_request "/tao_dividends" "hotkey=$hotkey"
        ;;
      4) # Netuid + hotkey
        read -r -p "Enter netuid (default 18): " netuid
        netuid=${netuid:-18}
        read -r -p "Enter hotkey (default: 5FFApaS75bv5pJHfAp2FVLBj9ZaXuFDjEypsaBNc1wCfe52v): " hotkey
        hotkey=${hotkey:-5FFApaS75bv5pJHfAp2FVLBj9ZaXuFDjEypsaBNc1wCfe52v}
        api_request "/tao_dividends" "netuid=$netuid&hotkey=$hotkey"
        ;;
      5) # Trigger trade
        read -r -p "Enter netuid (default 18): " netuid
        netuid=${netuid:-18}
        read -r -p "Enter hotkey (default: 5FFApaS75bv5pJHfAp2FVLBj9ZaXuFDjEypsaBNc1wCfe52v): " hotkey
        hotkey=${hotkey:-5FFApaS75bv5pJHfAp2FVLBj9ZaXuFDjEypsaBNc1wCfe52v}
        api_request "/tao_dividends" "netuid=$netuid&hotkey=$hotkey&trade=true"
        ;;
      0)
        break
        ;;
      *)
        echo -e "${RED}Invalid option${NC}"
        read -r -p "Press Enter to continue..."
        ;;
      esac
    done
    ;;
  2) # Wallet Operations
    while true; do
      show_wallet_menu
      wallet_option=""
      while [[ ! "$wallet_option" =~ ^[0-9]+$ ]]; do
        read -r -n 1 wallet_option
      done

      case $wallet_option in
      1)
        create_wallet
        ;;
      2)
        transfer_tao
        ;;
      0)
        break
        ;;
      *)
        echo -e "${RED}Invalid option${NC}"
        read -r -p "Press Enter to continue..."
        ;;
      esac
    done
    ;;
  0)
    echo -e "${YELLOW}Exiting...${NC}"
    exit 0
    ;;
  *)
    echo -e "${RED}Invalid option${NC}"
    read -r -p "Press Enter to continue..."
    ;;
  esac
done
